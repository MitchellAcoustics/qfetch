name: Test PyPI Publish

on:
  workflow_call:
    inputs:
      bump_rule:
        description: 'Base version to test (major/minor/patch)'
        type: string
        required: false
        default: 'dev'
    outputs:
      version:
        description: "The generated development version"
        value: ${{ jobs.publish-test.outputs.version }}
  workflow_dispatch:
    inputs:
      bump_rule:
        description: 'Base version to test (major/minor/patch)'
        type: choice
        options:
          - dev
          - patch
          - minor
          - major
        default: 'dev'
        required: true
  pull_request:
    branches: [ main ]

jobs:
  validate:
    uses: ./.github/workflows/ci.yml
  
  publish-test:
    needs: validate
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "0.4.29"
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python
      run: uv python install 3.12

    - name: Install build dependencies
      run: |
        uv tool install bump2version
        uv tool install twine

    - name: Generate development version
      id: version
      run: |
        # Handle different trigger types
        BUMP_RULE="${{ inputs.bump_rule || 'dev' }}"
        
        # Get current version
        CURRENT_VERSION=$(grep 'current_version = ' .bumpversion.cfg | sed 's/current_version = //')
        echo "Current version: $CURRENT_VERSION"
        
        if [ "$BUMP_RULE" = "dev" ]; then
          if [[ $CURRENT_VERSION == *".dev"* ]]; then
            # Already a dev version - increment dev number
            echo "Incrementing existing dev version"
            bump2version --allow-dirty --no-commit --no-tag dev
          else
            # Get current version components
            BASE_VERSION=$CURRENT_VERSION
            echo "Creating new dev version from $BASE_VERSION"
            # Explicitly set the new version to include dev1
            bump2version --allow-dirty --no-commit --no-tag --new-version "${BASE_VERSION}.dev1" dev
          fi
        else
          # Handle patch/minor/major bumps
          # First get the next version number
          NEXT_VERSION=$(bump2version --list $BUMP_RULE --dry-run | grep new_version | sed -r s,"^.*=",, )
          echo "Next version will be: ${NEXT_VERSION}.dev1"
          # Then create the dev version of it
          bump2version --allow-dirty --no-commit --no-tag --new-version "${NEXT_VERSION}.dev1" $BUMP_RULE
        fi
        
        # Store version for later use
        NEW_VERSION=$(grep 'current_version = ' .bumpversion.cfg | sed 's/current_version = //')
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION=${NEW_VERSION}" >> $GITHUB_ENV
        echo "Generated version: ${NEW_VERSION}"

    - name: Build package
      run: uv build

    - name: Publish to TestPyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
      run: twine upload --non-interactive dist/*

    - name: Test install from TestPyPI
      run: |
        sleep 60  # Wait for package to be available
        uv pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "quartofetch==${{ env.VERSION }}"